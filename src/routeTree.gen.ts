/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UniversityIndexImport } from './routes/university/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as OnboardingIndexImport } from './routes/onboarding/index'
import { Route as NotificationIndexImport } from './routes/notification/index'
import { Route as EventsIndexImport } from './routes/events/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as CollegeFinderIndexImport } from './routes/college-finder/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as ApplicationIndexImport } from './routes/application/index'
import { Route as EventsEventIdImport } from './routes/events/$eventId'
import { Route as ApplicationApplicationIdImport } from './routes/application/$applicationId'
import { Route as UniversityUniversityIdIndexImport } from './routes/university/$universityId/index'
import { Route as AuthSignupIndexImport } from './routes/auth/signup/index'
import { Route as AuthLoginIndexImport } from './routes/auth/login/index'
import { Route as UniversityUniversityIdApplyIndexImport } from './routes/university/$universityId/apply/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UniversityIndexRoute = UniversityIndexImport.update({
  id: '/university/',
  path: '/university/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const OnboardingIndexRoute = OnboardingIndexImport.update({
  id: '/onboarding/',
  path: '/onboarding/',
  getParentRoute: () => rootRoute,
} as any)

const NotificationIndexRoute = NotificationIndexImport.update({
  id: '/notification/',
  path: '/notification/',
  getParentRoute: () => rootRoute,
} as any)

const EventsIndexRoute = EventsIndexImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const CollegeFinderIndexRoute = CollegeFinderIndexImport.update({
  id: '/college-finder/',
  path: '/college-finder/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const ApplicationIndexRoute = ApplicationIndexImport.update({
  id: '/application/',
  path: '/application/',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdRoute = EventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any)

const ApplicationApplicationIdRoute = ApplicationApplicationIdImport.update({
  id: '/application/$applicationId',
  path: '/application/$applicationId',
  getParentRoute: () => rootRoute,
} as any)

const UniversityUniversityIdIndexRoute =
  UniversityUniversityIdIndexImport.update({
    id: '/university/$universityId/',
    path: '/university/$universityId/',
    getParentRoute: () => rootRoute,
  } as any)

const AuthSignupIndexRoute = AuthSignupIndexImport.update({
  id: '/auth/signup/',
  path: '/auth/signup/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  id: '/auth/login/',
  path: '/auth/login/',
  getParentRoute: () => rootRoute,
} as any)

const UniversityUniversityIdApplyIndexRoute =
  UniversityUniversityIdApplyIndexImport.update({
    id: '/university/$universityId/apply/',
    path: '/university/$universityId/apply/',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/application/$applicationId': {
      id: '/application/$applicationId'
      path: '/application/$applicationId'
      fullPath: '/application/$applicationId'
      preLoaderRoute: typeof ApplicationApplicationIdImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdImport
      parentRoute: typeof rootRoute
    }
    '/application/': {
      id: '/application/'
      path: '/application'
      fullPath: '/application'
      preLoaderRoute: typeof ApplicationIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/college-finder/': {
      id: '/college-finder/'
      path: '/college-finder'
      fullPath: '/college-finder'
      preLoaderRoute: typeof CollegeFinderIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexImport
      parentRoute: typeof rootRoute
    }
    '/notification/': {
      id: '/notification/'
      path: '/notification'
      fullPath: '/notification'
      preLoaderRoute: typeof NotificationIndexImport
      parentRoute: typeof rootRoute
    }
    '/onboarding/': {
      id: '/onboarding/'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/university/': {
      id: '/university/'
      path: '/university'
      fullPath: '/university'
      preLoaderRoute: typeof UniversityIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login/': {
      id: '/auth/login/'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup/': {
      id: '/auth/signup/'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupIndexImport
      parentRoute: typeof rootRoute
    }
    '/university/$universityId/': {
      id: '/university/$universityId/'
      path: '/university/$universityId'
      fullPath: '/university/$universityId'
      preLoaderRoute: typeof UniversityUniversityIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/university/$universityId/apply/': {
      id: '/university/$universityId/apply/'
      path: '/university/$universityId/apply'
      fullPath: '/university/$universityId/apply'
      preLoaderRoute: typeof UniversityUniversityIdApplyIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/application/$applicationId': typeof ApplicationApplicationIdRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/application': typeof ApplicationIndexRoute
  '/auth': typeof AuthIndexRoute
  '/college-finder': typeof CollegeFinderIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/events': typeof EventsIndexRoute
  '/notification': typeof NotificationIndexRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/university': typeof UniversityIndexRoute
  '/auth/login': typeof AuthLoginIndexRoute
  '/auth/signup': typeof AuthSignupIndexRoute
  '/university/$universityId': typeof UniversityUniversityIdIndexRoute
  '/university/$universityId/apply': typeof UniversityUniversityIdApplyIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/application/$applicationId': typeof ApplicationApplicationIdRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/application': typeof ApplicationIndexRoute
  '/auth': typeof AuthIndexRoute
  '/college-finder': typeof CollegeFinderIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/events': typeof EventsIndexRoute
  '/notification': typeof NotificationIndexRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/university': typeof UniversityIndexRoute
  '/auth/login': typeof AuthLoginIndexRoute
  '/auth/signup': typeof AuthSignupIndexRoute
  '/university/$universityId': typeof UniversityUniversityIdIndexRoute
  '/university/$universityId/apply': typeof UniversityUniversityIdApplyIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/application/$applicationId': typeof ApplicationApplicationIdRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/application/': typeof ApplicationIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/college-finder/': typeof CollegeFinderIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/events/': typeof EventsIndexRoute
  '/notification/': typeof NotificationIndexRoute
  '/onboarding/': typeof OnboardingIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/university/': typeof UniversityIndexRoute
  '/auth/login/': typeof AuthLoginIndexRoute
  '/auth/signup/': typeof AuthSignupIndexRoute
  '/university/$universityId/': typeof UniversityUniversityIdIndexRoute
  '/university/$universityId/apply/': typeof UniversityUniversityIdApplyIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/application/$applicationId'
    | '/events/$eventId'
    | '/application'
    | '/auth'
    | '/college-finder'
    | '/dashboard'
    | '/events'
    | '/notification'
    | '/onboarding'
    | '/settings'
    | '/university'
    | '/auth/login'
    | '/auth/signup'
    | '/university/$universityId'
    | '/university/$universityId/apply'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/application/$applicationId'
    | '/events/$eventId'
    | '/application'
    | '/auth'
    | '/college-finder'
    | '/dashboard'
    | '/events'
    | '/notification'
    | '/onboarding'
    | '/settings'
    | '/university'
    | '/auth/login'
    | '/auth/signup'
    | '/university/$universityId'
    | '/university/$universityId/apply'
  id:
    | '__root__'
    | '/'
    | '/application/$applicationId'
    | '/events/$eventId'
    | '/application/'
    | '/auth/'
    | '/college-finder/'
    | '/dashboard/'
    | '/events/'
    | '/notification/'
    | '/onboarding/'
    | '/settings/'
    | '/university/'
    | '/auth/login/'
    | '/auth/signup/'
    | '/university/$universityId/'
    | '/university/$universityId/apply/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApplicationApplicationIdRoute: typeof ApplicationApplicationIdRoute
  EventsEventIdRoute: typeof EventsEventIdRoute
  ApplicationIndexRoute: typeof ApplicationIndexRoute
  AuthIndexRoute: typeof AuthIndexRoute
  CollegeFinderIndexRoute: typeof CollegeFinderIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  EventsIndexRoute: typeof EventsIndexRoute
  NotificationIndexRoute: typeof NotificationIndexRoute
  OnboardingIndexRoute: typeof OnboardingIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  UniversityIndexRoute: typeof UniversityIndexRoute
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
  AuthSignupIndexRoute: typeof AuthSignupIndexRoute
  UniversityUniversityIdIndexRoute: typeof UniversityUniversityIdIndexRoute
  UniversityUniversityIdApplyIndexRoute: typeof UniversityUniversityIdApplyIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApplicationApplicationIdRoute: ApplicationApplicationIdRoute,
  EventsEventIdRoute: EventsEventIdRoute,
  ApplicationIndexRoute: ApplicationIndexRoute,
  AuthIndexRoute: AuthIndexRoute,
  CollegeFinderIndexRoute: CollegeFinderIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  EventsIndexRoute: EventsIndexRoute,
  NotificationIndexRoute: NotificationIndexRoute,
  OnboardingIndexRoute: OnboardingIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  UniversityIndexRoute: UniversityIndexRoute,
  AuthLoginIndexRoute: AuthLoginIndexRoute,
  AuthSignupIndexRoute: AuthSignupIndexRoute,
  UniversityUniversityIdIndexRoute: UniversityUniversityIdIndexRoute,
  UniversityUniversityIdApplyIndexRoute: UniversityUniversityIdApplyIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/application/$applicationId",
        "/events/$eventId",
        "/application/",
        "/auth/",
        "/college-finder/",
        "/dashboard/",
        "/events/",
        "/notification/",
        "/onboarding/",
        "/settings/",
        "/university/",
        "/auth/login/",
        "/auth/signup/",
        "/university/$universityId/",
        "/university/$universityId/apply/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/application/$applicationId": {
      "filePath": "application/$applicationId.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx"
    },
    "/application/": {
      "filePath": "application/index.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/college-finder/": {
      "filePath": "college-finder/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    },
    "/events/": {
      "filePath": "events/index.tsx"
    },
    "/notification/": {
      "filePath": "notification/index.tsx"
    },
    "/onboarding/": {
      "filePath": "onboarding/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/university/": {
      "filePath": "university/index.tsx"
    },
    "/auth/login/": {
      "filePath": "auth/login/index.tsx"
    },
    "/auth/signup/": {
      "filePath": "auth/signup/index.tsx"
    },
    "/university/$universityId/": {
      "filePath": "university/$universityId/index.tsx"
    },
    "/university/$universityId/apply/": {
      "filePath": "university/$universityId/apply/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
